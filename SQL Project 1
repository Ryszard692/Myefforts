-- PROJECT 1 --
This project is an example of writing queries to analyse a data set. 

/* Write a query to list only those employees who have someone
reporting to them. Also, show the number of reporters (including the
President) */

SELECT role, manager_id, count(*)
FROM emp_record_table
GROUP BY manager_id
ORDER BY manager_id;

/* Write a query to list down all the employees from the healthcare and
finance departments using union. Take data from the employee record table */

SELECT first_name, last_name, dept
FROM emp_record_table
WHERE dept = "HEALTHCARE"
UNION
SELECT first_name, last_name, dept
FROM emp_record_table
WHERE dept = "FINANCE";

/* Write a query to list down employee details such as EMP_ID,
FIRST_NAME, LAST_NAME, ROLE, DEPARTMENT, and EMP_RATING
grouped by dept. Also include the respective employee rating along
with the max emp rating for the department */

SELECT * FROM emp_record_table;
USE employee; 

SELECT emp_id, first_name, last_name, role, dept, emp_rating, emp_rating AS max_rating
FROM emp_record_table
WHERE (dept, emp_rating)
IN (SELECT dept, MAX(emp_rating) FROM emp_record_table GROUP By dept)
ORDER BY dept ASC;

/* Write a query to calculate the minimum and the maximum salary of the
employees in each role. Take data from the employee record table */


SELECT role, MIN(salary), MAX(salary) FROM emp_record_table
GROUP BY role; 

/* Write a query to assign ranks to each employee based on their
experience. Take data from the employee record table */

SELECT emp_id, exp, ROW_NUMBER() OVER(ORDER BY exp DESC) FROM emp_record_table;

SELECT first_name, last_name, exp as experience,
DENSE_RANK() OVER (ORDER BY exp DESC) exp_rank
FROM emp_record_table;

/* Write a query to create a view that displays employees in various
countries whose salary is more than six thousand. Take data from the
employee record table */

CREATE VIEW countries AS
SELECT Last_name, country, salary FROM emp_record_table
WHERE salary > 6000; 

/* Write a nested query to find employees with experience of more
than ten years. Take data from the employee record table */
-- not sure why nested query qould be a good idea here, please explain --

SELECT emp_id, first_name, last_name, exp
FROM emp_record_table
WHERE exp IN (
SELECT exp
FROM emp_record_table
WHERE exp > 10
);

/* Write a query to create a stored procedure to retrieve the details of
the employees whose experience is more than three years. Take data
from the employee record table */

DELIMITER //
CREATE PROCEDURE employees_experience_more_than_3() 
BEGIN 
SELECT * FROM emp_record_table
WHERE exp > 3;
END //
CALL employees_experience_more_than_3() 

/* Write a query using stored functions in the project table to check
whether the job profile assigned to each employee in the data science
team matches the organizationâ€™s set standard.
The standard is:
For an employee with experience less than or equal to 2 years assign
'JUNIOR DATA SCIENTIST',
For an employee with the experience of 2 to 5 years assign 'ASSOCIATE
DATA SCIENTIST',
For an employee with the experience of 5 to 10 years assign 'SENIOR
DATA SCIENTIST',
For an employee with the experience of 10 to 12 years assign 'LEAD
DATA SCIENTIST' */

DELIMITER //
CREATE PROCEDURE check_role()
BEGIN
SELECT first_name, last_name, exp, 
		CASE
			WHEN exp <= 2 THEN "JUNIOR DATA SCIENTIST"
			WHEN exp BETWEEN 2 AND 5 THEN "ASSOCIATE DATA SCIENTIST"
			WHEN exp BETWEEN 6 AND 10 THEN "SENIOR DATA SCIENTIST"
			WHEN exp BETWEEN 11 AND 12 THEN "LEAD DATA SCIENTIST"
			WHEN exp BETWEEN 13 AND 16 THEN "MANAGER"
			ELSE "all good"
		END AS job_profile
    FROM emp_record_table;
END //
DELIMITER ;
CALL check_role();


/* Write a query to calculate the bonus for all the employees, based on
their ratings and salaries (Use the formula: 5% of salary * employee
rating) */ 

SELECT last_name, salary, emp_rating, (0.05 * salary * emp_rating) AS bonus FROM emp_record_table;


/* Write a query to calculate the average salary distribution based on the
continent and country. Take data from the employee record table */

SELECT continent, country, AVG(salary) AS average_salary FROM emp_record_table
GROUP BY Continent, country
ORDER BY continent;
